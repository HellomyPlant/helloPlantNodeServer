swagger: '2.0'
info:
  description: This is HelloPlant api document!
  version: 1.0.0
  title: HelloPlant api
  contact:
    email: qwerq123456@snu.ac.kr
basePath: '/18.116.203.236:1234'
schemes:
  - http
tags:
  - name: users
    description: method about user model
  - name: myPlant
    description: method about myplant model
  - name: test
    description: Methods for developer's test
paths:
  /test:
    get:
      tags:
        - test
      summary: test for url
      operationId: url test
      description: |
        you can test url with this method
      responses:
        '200':
          description: it just sends 200
  /user/signup:
    post:
      tags:
        - users
      summary: user signup
      operationId: UserSignup
      description: |
        you can signup with email, password, nickname
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: signup data
          schema:
            type: object
            required:
              - email
              - password
              - nickname
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              nickname:
                type: string
      responses:
        '201':
          description: signup success
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'signup success with email: ${user.email}'
        '409':
          description: signup fail with vallidation error
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'signup error with ${errormessage}'
  /user/login:
    post:
      tags:
        - users
      summary: user login
      operationId: UserLogin
      description: |
        you can login in with email, password
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: login data
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
      responses:
        '200':
          description: login success
          schema:
            type: object
            properties:
              message:
                type: string
                example: login success
              accessToken:
                type: string
                format: accessToken
        '400':
          description: bad request because no email or password
        '401':
          description: login fail because email and password not mached
  /user/test:
    get:
      tags:
        - test
      summary: test jwt token available
      operationId: testJWT
      description: |
        By passing jwt in header with bearer token option, you can test jwt available
      produces:
        - application/json
      responses:
        '200':
          description: token available
        '401':
          description: token not available
  /myplant:
    post:
      tags:
        - myPlant
      summary: add myplant
      operationId: appMyPlant
      description: You can add myplant with myplant data
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          type: string
          format: email
          required: true
        - in: body
          name: body
          description: add myplant data
          schema:
            type: object
            required:
              - scientific_name
              - water_cycle
              - fertilizer_cycle
              - nickname
              - image
            properties:
              scientific_name:
                type: string
              water_cycle:
                type: string
              fertilizer_cycle:
                type: string
              nickname:
                type: string
              image:
                type: string
                format: base64
      responses:
        '201':
          description: add myplant success
          schema:
            type: object
            properties:
              newPlant:
                type: object
                $ref: '#definitions/myPlant'
                properties:
                  image:
                    type: string
                    format: base64
                  nickname:
                    type: string
                  scientific_name:
                    type: string
                  water_cycle:
                    type: string
                  fertilizer_cycle:
                    type: string
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        '400':
          description: add myplant fail
          schema:
            type: object
            properties:
              errormessage:
                type: string
    delete:
      tags:
        - myPlant
      summary: delete myplant
      operationId: deleteMyPlant
      description: You can delete myplant with plantId
      produces:
        - application/json
      parameters:
        - in: body
          name: deleteMyPlant
          description: delete myplant data
          schema:
            type: object
            required:
              - plantId
              - email
            properties:
              plantId:
                type: string
              email:
                type: string
                format: email
      responses:
        '204':
          description: delete success
        '400':
          description: no plant to delete
          schema:
            type: object
            properties:
              message:
                type: string
                example: no plant
        '403':
          description: delete myplant fail
          schema:
            type: object
            properties:
              errormessage:
                type: string
    put:
      tags:
        - myPlant
      summary: edit myplant
      operationId: editMyPlant
      description: You can edit myplant with plant data
      produces:
        - application/json
      parameters:
        - in: query
          name: plantId
          type: string
          required: true
        - in: body
          name: body
          description: edit myplant data
          schema:
            type: object
            properties:
              water_cycle:
                type: string
              fertilizer_cycle:
                type: string
              nickname:
                type: string
      responses:
        '204':
          description: success
        '400':
          description: no plant to delete
          schema:
            type: object
            properties:
              message:
                type: string
        '403':
          description: delete myplant fail
          schema:
            type: object
            properties:
              errormessage:
                type: string
  /myplant/list:
    get:
      tags:
        - myPlant
      summary: get myplant list with user email
      operationId: myPlantList
      description: |
        you can get myplant list with user email
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          type: string
          required: true
          format: email
      responses:
        '200':
          description: get list success
          schema:
            type: object
            properties:
              plants:
                type: array
                items:
                  $ref: '#definitions/myPlant'
        '400':
          description: bad request because can't find user with email
        '403':
          description: get list fail
definitions:
  User:
    type: object
    required:
      - id
      - email
      - password
      - nickname
    properties:
      id:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
      nickname:
        type: string
        example: testnickname
      myPlantList:
        type: array
        items:
          $ref: '#definitions/myPlant'
      createdAt:
        type: string
        format: date
      updatedAt:
        type: string
        format: date
    description: user model
  myPlant:
    type: object
    required:
      - image
      - nickname
      - scientific_name
      - water_cycle
      - fertilizer_cycle
    properties:
      image:
        type: string
        format: base64
      nickname:
        type: string
      scientific_name:
        type: string
      water_cycle:
        type: string
      fertilizer_cycle:
        type: string
      createdAt:
        type: string
        format: date
      updatedAt:
        type: string
        format: date
    description: my plant for user
